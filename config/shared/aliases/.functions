# Create directory and navigate to it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract various archive formats
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find and grep in files
fgr() {
    if [ $# -eq 0 ]; then
        echo "Usage: fgr <pattern> [path]"
        return 1
    fi
    
    local pattern="$1"
    local path="${2:-.}"
    
    fd -type f -exec grep -l "$pattern" {} \; "$path"
}

# Quick file search
ff() {
    fd -type f -name "*$1*"
}

# Process management
psg() {
    ps aux | grep -v grep | grep "$@"
}

# Git helpers
gclone() {
    git clone "$1" && cd "$(basename "$1" .git)"
}

# Create a new git repository
ginit() {
    git init
    git add .
    git commit -m "Initial commit"
}

# Quick commit with message
gcommit() {
    git add .
    git commit -m "$1"
}

# Show git branch in prompt (helper for shell configs)
git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# Network utilities
port() {
    netstat -tulpn | grep ":$1 "
}

# Get weather
weather() {
    local location="${1:-}"
    curl -s "wttr.in/${location}?format=3"
}

# Quick backup
backup() {
    cp "$1"{,.backup.$(date +%Y%m%d_%H%M%S)}
}

# Find large files
large() {
    du -ah "${1:-.}" | sort -rh | head -20
}

# Show directory size
dirsize() {
    du -sh "${1:-.}"
}

# SSH with agent forwarding
ssha() {
    ssh -A "$@"
}

# Development server with live reload (if available)
devserver() {
    local port="${1:-8000}"
    python3 -m http.server "$port"
}

# Quick note taking
note() {
    local note_file="$HOME/notes.txt"
    if [ $# -eq 0 ]; then
        cat "$note_file"
    else
        echo "$(date): $*" >> "$note_file"
    fi
}

# URL encode/decode
urlencode() {
    python3 -c "import urllib.parse; print(urllib.parse.quote('$1'))"
}

urldecode() {
    python3 -c "import urllib.parse; print(urllib.parse.unquote('$1'))"
}