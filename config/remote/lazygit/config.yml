# Lazygit configuration for remote environment (DevPod/SSH/Container)
# Optimized for terminal-only environments

gui:
  # Conservative icon settings for remote environments
  nerdFontsVersion: ""
  showFileIcons: false
  
  # Compact UI for potentially smaller terminal windows
  sidePanelWidth: 0.3
  expandFocusedSidePanel: false
  mainPanelSplitMode: horizontal
  enlargedSideViewLocation: top
  
  # Simple theme that works in all terminals
  theme:
    activeBorderColor:
      - green
      - bold
    selectedLineBgColor:
      - reverse
    unstagedChangesColor:
      - red
    
  # Essential UI elements only
  showListFooter: true
  showFileTree: true
  showCommandLog: false
  showBottomLine: true
  showRandomTip: false
  
  # No mouse support in remote environments
  mouseEvents: false
  
  # More conservative warning settings for remote work
  skipDiscardChangeWarning: false
  skipStashWarning: false
  
  # Default screen mode - start in full screen
  screenMode: full
  
  # Status panel view - use dashboard (default) to start in Files view
  statusPanelView: dashboard

git:
  # Conservative auto-settings for remote environments
  autoFetch: false
  autoRefresh: true
  autoForwardBranches: none
  fetchAll: false
  
  # Commit settings
  commit:
    signOff: false
    autoWrapCommitMessage: true
    autoWrapWidth: 72
  
  # Merging
  merging:
    manualCommit: true
    args: ""
  
  # Main branches
  mainBranches:
    - master
    - main
    - develop
    - dev
  
  # Simple paging for remote environments
  paging:
    colorArg: always
    pager: ""
    useConfig: true

# Remote environment OS integration
os:
  # Use vim as default editor (commonly available in remote environments)
  editPreset: "vim"
  
  # Generic commands that work in most Linux environments
  open: "xdg-open {{filename}} >/dev/null 2>&1 || echo 'No GUI available'"
  openLink: "echo '{{link}}' | tee /dev/stderr"
  
  # Use basic clipboard commands or fallback to echo
  copyToClipboardCmd: |
    if command -v xclip >/dev/null 2>&1; then
      xclip -selection clipboard
    elif command -v pbcopy >/dev/null 2>&1; then
      pbcopy
    else
      echo "Copied: {{text}}"
    fi
  readFromClipboardCmd: |
    if command -v xclip >/dev/null 2>&1; then
      xclip -selection clipboard -o
    elif command -v pbpaste >/dev/null 2>&1; then
      pbpaste
    else
      echo ""
    fi

# Update settings - less frequent for remote environments
update:
  method: prompt
  days: 30

# No startup popups in remote environments
disableStartupPopups: true

# Don't confirm quit in remote environments (faster workflow)
confirmOnQuit: false

# Streamlined keybindings for remote development
keybinding:
  universal:
    # Standard vim navigation
    prevItem-alt: k
    nextItem-alt: j
    prevBlock-alt: h
    nextBlock-alt: l
    
    # Essential shortcuts
    refresh: r
    filteringMenu: f
    
  files:
    # Quick commit workflows
    commitChanges: c
    commitChangesWithEditor: C
    amendLastCommit: A
    stashAllChanges: s
    
    # File operations
    ignoreFile: i
    toggleStagedAll: a
    
  branches:
    # Branch operations
    checkoutBranchByName: c
    rebaseBranch: r
    mergeIntoCurrentBranch: M
    
  commits:
    # Interactive rebase shortcuts
    squashDown: s
    renameCommit: r
    moveDownCommit: <c-j>
    moveUpCommit: <c-k>