#!/bin/bash

# Development environment status checker

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Status symbols
CHECK="✅"
CROSS="❌"
WARNING="⚠️"

echo -e "${BLUE}🔍 Development Environment Status${NC}"
echo "=================================="

# Function to check if command exists
check_command() {
    local cmd="$1"
    local description="$2"
    local optional="${3:-false}"
    
    if command -v "$cmd" >/dev/null 2>&1; then
        local version=""
        case "$cmd" in
            "git") version="$(git --version | cut -d' ' -f3)" ;;
            "nvim") version="$(nvim --version | head -n1 | cut -d' ' -f2)" ;;
            "zellij") version="$(zellij --version | cut -d' ' -f2)" ;;
            "fzf") version="$(fzf --version | cut -d' ' -f1)" ;;
            "rg") version="$(rg --version | head -n1 | cut -d' ' -f2)" ;;
            "bat") version="$(bat --version | cut -d' ' -f2)" ;;
            "fd") version="$(fd --version | cut -d' ' -f2)" ;;
            "devpod") version="$(devpod version 2>/dev/null | grep 'devpod version' | cut -d' ' -f3 || echo 'unknown')" ;;
            *) version="installed" ;;
        esac
        echo -e "${CHECK} ${description}: ${GREEN}${version}${NC}"
        return 0
    else
        if [[ "$optional" == "true" ]]; then
            echo -e "${WARNING} ${description}: ${YELLOW}not installed (optional)${NC}"
        else
            echo -e "${CROSS} ${description}: ${RED}not installed${NC}"
        fi
        return 1
    fi
}

# Function to check file exists
check_file() {
    local file="$1"
    local description="$2"
    local optional="${3:-false}"
    
    if [[ -f "$file" ]]; then
        echo -e "${CHECK} ${description}: ${GREEN}exists${NC}"
        return 0
    else
        if [[ "$optional" == "true" ]]; then
            echo -e "${WARNING} ${description}: ${YELLOW}not found (optional)${NC}"
        else
            echo -e "${CROSS} ${description}: ${RED}not found${NC}"
        fi
        return 1
    fi
}

# Environment detection
echo -e "\n${BLUE}Environment Detection:${NC}"
if [[ -n "${DEVPOD}" || -n "${DEVPOD_WORKSPACE_ID}" ]]; then
    echo -e "${CHECK} Environment: ${GREEN}DevPod${NC}"
elif [[ -n "${CONTAINER}" || -f /.dockerenv ]]; then
    echo -e "${CHECK} Environment: ${GREEN}Container${NC}"
elif [[ -n "${SSH_CONNECTION}" ]]; then
    echo -e "${CHECK} Environment: ${GREEN}SSH Remote${NC}"
else
    echo -e "${CHECK} Environment: ${GREEN}Host/Local${NC}"
fi

echo -e "${CHECK} OS: ${GREEN}$(uname -s)${NC}"
echo -e "${CHECK} Architecture: ${GREEN}$(uname -m)${NC}"
echo -e "${CHECK} Shell: ${GREEN}${SHELL}${NC}"

# Core tools
echo -e "\n${BLUE}Core Development Tools:${NC}"
check_command "git" "Git"
check_command "nvim" "Neovim"
check_command "vim" "Vim (fallback)" true

# Terminal tools
echo -e "\n${BLUE}Terminal Enhancement Tools:${NC}"
check_command "zellij" "Zellij" true
check_command "fzf" "FZF" true
check_command "rg" "Ripgrep" true
check_command "bat" "Bat" true
check_command "fd" "Fd" true
check_command "eza" "Eza" true

# Package managers
echo -e "\n${BLUE}Package Managers:${NC}"
if [[ "$OSTYPE" == "darwin"* ]]; then
    check_command "brew" "Homebrew"
else
    check_command "apt-get" "APT" true
    check_command "yum" "YUM" true
    check_command "pacman" "Pacman" true
fi

# DevPod (for host environments)
if [[ -z "${DEVPOD}" && -z "${CONTAINER}" ]]; then
    echo -e "\n${BLUE}Development Platform:${NC}"
    check_command "devpod" "DevPod" true
fi

# Configuration files
echo -e "\n${BLUE}Configuration Files:${NC}"
check_file "$HOME/.zshrc" "Zsh config" true
check_file "$HOME/.bashrc" "Bash config" true
check_file "$HOME/.gitconfig" "Git config" true
check_file "$HOME/.aliases" "Aliases" true
check_file "$HOME/.functions" "Functions" true

# Environment-specific configs
if command -v zellij >/dev/null 2>&1; then
    check_file "$HOME/.config/zellij/config.kdl" "Zellij config" true
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
    check_file "$HOME/.config/wezterm/wezterm.lua" "Wezterm config" true
fi

# PATH check
echo -e "\n${BLUE}PATH Configuration:${NC}"
if echo "$PATH" | grep -q "$HOME/.local/bin"; then
    echo -e "${CHECK} Local bin in PATH: ${GREEN}yes${NC}"
else
    echo -e "${WARNING} Local bin in PATH: ${YELLOW}no${NC}"
fi

# Git configuration check
echo -e "\n${BLUE}Git Configuration:${NC}"
if git config --global user.name >/dev/null 2>&1; then
    echo -e "${CHECK} Git user name: ${GREEN}$(git config --global user.name)${NC}"
else
    echo -e "${CROSS} Git user name: ${RED}not set${NC}"
fi

if git config --global user.email >/dev/null 2>&1; then
    echo -e "${CHECK} Git user email: ${GREEN}$(git config --global user.email)${NC}"
else
    echo -e "${CROSS} Git user email: ${RED}not set${NC}"
fi

# Summary
echo -e "\n${BLUE}Summary:${NC}"
echo -e "${GREEN}Environment is ready for development!${NC}"

if [[ -n "${ZELLIJ}" ]]; then
    echo -e "${GREEN}Currently running in Zellij session${NC}"
fi

echo -e "\n${YELLOW}💡 Tips:${NC}"
echo -e "  • Run 'sync-dotfiles' to update your dotfiles"
echo -e "  • Use 'devpod-connect <workspace>' to connect to DevPod workspaces"
echo -e "  • Type 'zellij' to start a terminal multiplexer session"